%table.table.table-bordered
  %tr
    -%w[名前 状態 処理日時 処理時間 ログ ファイル 出力サイズ 操作].each do |column_name|
      %th=column_name
  -logs.each do |log|
    -next if log.video.nil?
    %tr
      %td=link_to log.video.output_name, url(:videos, :show, :id=>log.video_id)
      %td=log.status
      %td=log.start_at.localtime.to_s(:db)
      %td=log.process_time
      %td=truncate log.body
      %td=number_to_human_size log.video.filesize
      %td=log.output_size
      %td
        -if not Job.already_queue?(:destroy_ts, log.video_id) and log.video.exists_ts?
          %button.btn{type: 'button'}
            %span.glyph.glyphicon.glyphicon-trash.destroy_ts{data: {video_id: log.video.id, name: log.video.output_name}}

:coffee
  $('.destroy_ts').on 'click', ->
    target_item = $(this)
    video_id = target_item.data('videoId')
    request_path = '/jobs/'+video_id+'/destroy_ts/'+video_id
    fail_alert = ->
      alert('fail request' + target_item.data('name'))

    $.ajax(
      type: 'POST'
      url: request_path
      data:
        job:
          job_type: 'destroy_ts'
          arguments:
            video_id: video_id
    ).done((result)->
      if result
        target_item.parent('button.btn').remove()
      else
        fail_alert()
    ).fail(->
      console.log('fail')
      alert('fail request' + target_item.text())
    )
